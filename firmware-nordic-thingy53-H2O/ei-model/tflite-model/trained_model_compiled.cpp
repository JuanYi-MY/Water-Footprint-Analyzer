/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 30.09.2022 13:17:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0031096814200282097, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -62,-11,-70,22,28,46,86,98,109,12,35,27,-23,7,-80,-54,-51,14,-34,-36,-48,28,-23,3,27,60,-31,43,12,-29,-31,-9,-22,14,64,33,-47,-30,7,-55, 25,-20,9,-23,-2,123,111,25,104,22,82,-6,-55,-80,-79,41,-35,-6,2,-29,-27,-13,26,-37,-37,-38,-13,37,30,18,-16,30,72,32,0,-17,-7,14,-13,-14, -12,-36,-17,34,49,100,127,102,61,14,16,-13,-30,-22,-73,8,-91,-21,-38,31,39,31,7,-57,-19,47,-10,13,-7,38,-41,-18,37,29,1,6,57,38,58,-19, 
  /* [1][0][][] */ 20,-3,-35,-57,8,35,96,12,46,87,50,-79,20,10,-68,36,16,30,14,-43,-46,73,-24,-35,63,16,-35,-50,-84,38,-42,-32,32,-48,-34,-41,7,-5,23,38, -21,7,-10,12,-59,94,127,19,118,78,7,25,-118,-98,-77,-86,27,58,-47,-55,42,92,88,61,68,-8,-68,-114,-65,-15,-69,74,59,18,-39,66,-64,51,83,101, -75,-11,6,55,21,-36,61,1,99,73,9,-44,28,2,-98,36,32,-44,-65,-104,-20,-26,-44,45,-2,-11,4,-123,6,-57,-96,26,88,37,2,20,51,51,54,14, 
  /* [2][0][][] */ -1,-97,-82,110,-121,-96,-116,98,-44,-58,0,114,73,36,-15,-116,56,-3,-10,92,-65,-5,-52,84,-30,-41,9,-103,-92,-21,-90,23,90,-86,-33,64,-34,-74,29,-19, -83,-76,-48,58,-55,113,-29,-93,-57,-79,74,-79,94,-7,52,-59,69,-57,-81,24,-80,-63,-84,-3,-3,4,-97,83,11,-27,-28,37,17,-41,0,-88,107,57,-44,-12, -122,-113,99,-27,64,-88,99,45,-68,-125,21,-26,47,102,7,-48,-94,36,-56,-52,96,-54,-52,0,-103,-13,88,26,-75,-119,-39,33,109,-11,-8,76,13,-102,95,-127, 
  /* [3][0][][] */ -75,69,-15,85,84,-103,-95,-41,-88,-10,-15,38,65,99,127,-33,12,-5,-31,9,7,39,64,-70,78,31,13,22,-2,71,36,12,-15,-33,-33,-7,-54,48,-25,-79, -21,31,38,-38,71,33,-23,-59,-95,24,-101,66,23,-27,31,103,-5,57,24,-11,-17,31,46,-75,-9,33,17,46,62,56,81,-43,-87,39,-8,-15,-74,-85,44,-84, -9,-56,68,-29,53,-57,-24,-54,-30,-44,-2,78,98,43,106,-31,55,33,59,93,-1,-54,-60,-75,-31,13,-41,120,-10,26,-30,-61,-63,47,28,47,-75,-25,38,43, 
  /* [4][0][][] */ 19,23,-51,4,35,-98,-3,-6,-107,2,12,22,-26,33,-9,-64,79,-60,-23,-42,26,10,38,-13,57,-9,-56,-117,33,-69,-23,-31,58,-54,-74,-59,61,76,-35,59, -43,7,-50,-55,-10,-46,-83,-61,-51,-32,-13,-99,-108,-11,-78,-41,127,-73,-46,34,7,-32,-13,97,67,35,-104,-56,-16,-8,45,76,-16,-25,51,6,48,-53,33,14, -7,-9,73,18,34,-52,-64,-33,0,29,49,-51,28,14,-33,-64,3,-16,6,14,43,3,95,-16,105,-74,-43,-49,12,-71,-85,14,23,-24,5,59,44,41,42,78, 
  /* [5][0][][] */ 8,-19,-10,-10,-20,-93,-84,-91,-46,-104,-40,13,86,14,24,24,64,41,-1,88,6,28,71,18,56,-28,67,-58,-16,51,74,44,-72,-20,-35,56,8,-26,-30,-11, -38,-40,-58,63,-16,-27,-48,-34,-127,41,-57,-65,-6,-13,47,-15,62,-59,87,-20,-46,-71,-18,-29,41,26,32,15,-41,88,49,85,-4,23,26,36,-67,75,25,25, -20,10,-25,-80,-7,-94,-18,-4,-8,-110,-48,60,49,81,60,82,72,-48,84,45,3,-18,31,-9,95,80,40,-14,55,74,-19,-33,-79,-80,55,-74,-35,2,-7,75, 
  /* [6][0][][] */ -75,-67,-86,-50,-21,72,127,99,41,90,30,21,-6,-66,-43,5,-27,-3,-24,-63,-27,2,-16,9,-52,-31,-8,44,50,-30,-35,-48,4,71,18,55,12,-35,-27,29, -28,-40,-26,40,2,103,41,15,86,40,57,18,-19,-44,-104,33,-71,18,-70,18,3,26,22,-11,-80,-18,2,30,33,-13,22,-32,-13,-7,19,33,14,40,0,14, -75,-4,-19,-23,-17,51,107,84,101,57,36,3,-32,-61,-72,-17,-85,-27,-28,-4,28,-6,-28,-24,-91,-40,60,43,48,-27,-2,-28,17,58,58,47,36,-11,36,16, 
  /* [7][0][][] */ -44,-67,-31,45,36,-96,-56,20,-44,25,-111,-48,8,85,-26,-9,-87,-9,50,-113,60,-38,67,76,72,42,-86,-115,63,57,-99,-65,23,-94,-54,-81,81,-74,23,12, -6,-11,-25,35,-123,-21,39,35,51,-38,-55,0,-82,-41,38,-122,3,-33,-1,-117,-40,-71,73,-95,75,50,40,-58,60,75,16,-14,-4,41,-126,-115,-120,54,19,-97, -114,-117,-110,-61,32,-14,46,57,-104,-10,-127,-52,-38,24,-75,22,-29,-18,-69,-48,-11,66,-42,-53,-66,44,61,35,-116,19,-90,-63,-89,-34,-6,24,-120,-101,-23,53, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0036479842383414507, 0.0025114789605140686, 0.0016600781818851829, 0.0027150444220751524, 0.0029332698322832584, 0.0026509340386837721, 0.0041955998167395592, 0.0019263079157099128, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -4869, -7096, -6126, 8365, -4609, -1090, -4677, -7516, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.134406920755282e-05, 7.8098992162267677e-06, 5.1623142098833341e-06, 8.4429229900706559e-06, 9.1215342763462104e-06, 8.2435599324526265e-06, 1.3046978892816696e-05, 5.9902040447923355e-06, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -32,-24,-44,83,-10,-14,127,-21, 84,-12,-67,7,-15,-31,78,-43, 70,-42,52,64,17,84,114,5, 
  /* [1][0][][] */ -66,127,-72,-69,32,-26,11,20, -62,2,-26,-8,-21,19,-65,-23, 36,112,28,37,89,-18,-108,2, 
  /* [2][0][][] */ -66,43,-70,-2,27,101,-127,-77, 33,-9,-10,114,38,-2,-121,38, -28,-48,-26,-26,29,66,-49,-3, 
  /* [3][0][][] */ -18,-8,16,30,-33,97,26,91, -6,-41,16,110,31,89,127,7, 34,-116,50,43,-50,86,106,-44, 
  /* [4][0][][] */ 8,46,79,26,92,-9,-74,43, -107,8,8,10,5,-22,-49,76, 44,-57,79,112,-9,127,-107,71, 
  /* [5][0][][] */ 8,-20,-65,32,89,73,-61,67, -79,-46,-69,33,58,70,-125,-52, -43,28,43,-7,71,2,-127,41, 
  /* [6][0][][] */ 39,49,53,42,49,30,-127,58, -1,36,39,-98,36,82,-100,-95, -84,94,7,-61,87,-54,-81,-29, 
  /* [7][0][][] */ -118,-111,69,18,-50,98,40,13, -20,-127,-36,55,43,65,28,-94, -116,-121,-41,43,9,39,-65,45, 
  /* [8][0][][] */ -92,-75,108,-48,-68,-64,-20,89, -4,-52,-81,70,66,-3,50,58, 28,-103,74,-127,-29,-110,86,31, 
  /* [9][0][][] */ 50,-18,27,-38,74,43,-26,-23, 52,118,66,-81,39,21,127,-49, -34,34,73,-24,37,-24,74,15, 
  /* [10][0][][] */ 38,19,43,-10,-4,-31,30,15, 107,30,17,16,56,21,127,-39, 51,18,-12,-50,-14,-11,123,-25, 
  /* [11][0][][] */ 68,-41,-10,56,-27,-48,114,-9, 44,57,64,-26,-49,4,70,74, 95,18,-78,67,60,-50,127,10, 
  /* [12][0][][] */ 125,55,-91,-55,64,61,97,-64, 30,48,81,-23,91,-64,127,56, 50,95,-62,-77,19,50,65,81, 
  /* [13][0][][] */ -55,21,-65,91,-43,-56,-92,-74, -92,-20,16,-4,90,14,-127,-69, -63,-48,-53,70,22,42,-37,-37, 
  /* [14][0][][] */ 50,57,61,-8,-54,49,11,-78, 106,86,-64,-26,102,-20,56,-24, 26,127,58,-77,21,8,76,3, 
  /* [15][0][][] */ 88,51,-13,12,-17,-42,13,-1, 34,44,-12,-70,66,43,127,15, 97,-10,19,-63,-2,23,18,30, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0039818193763494492, 0.0034581003710627556, 0.0035625379532575607, 0.0031553860753774643, 0.003122872207313776, 0.0034671621397137642, 0.0031538126058876514, 0.0035008327104151249, 0.0023989242035895586, 0.0034971176646649837, 0.0047652521170675755, 0.0033815284259617329, 0.0029290695674717426, 0.0033358093351125717, 0.0034050901886075735, 0.0043787327595055103, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -2576, -1124, -1802, -3089, -2526, -1090, -910, -1904, -3762, -3003, -2466, -2201, -4113, 24892, -3921, -2301, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 2.3657132260268554e-05, 2.0545567167573608e-05, 2.1166060832911171e-05, 1.8747054127743468e-05, 1.8553881091065705e-05, 2.0599405615939759e-05, 1.8737706341198646e-05, 2.0799452613573521e-05, 1.4252697837946471e-05, 2.0777380996150896e-05, 2.8311731512076221e-05, 2.0090630641789176e-05, 1.7402442608727142e-05, 1.9819000954157673e-05, 2.0230618247296661e-05, 2.6015308321802877e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[4*400] = { 
  -32, 36, 4, -16, -3, 8, 7, -10, 1, 9, 7, -14, -12, 0, 34, 11, -29, 10, 8, 10, 2, 18, 10, -8, 13, 32, 8, -19, 10, 2, 17, 15, -46, 30, 31, -2, 2, 8, 20, -15, -12, 0, -32, 2, 5, -27, -21, -4, -8, 47, 17, -2, 16, 23, 9, -35, 27, -15, -24, -23, 7, 7, 9, 15, -20, 38, 31, 1, 27, 44, 30, -22, -13, 18, -14, -16, 6, -3, 1, 18, -39, 27, 19, -23, -4, 22, 0, 0, 16, -5, -26, 2, -17, -10, -18, 7, -44, 7, 14, 13, 11, 5, 8, -28, 30, 20, -27, -14, -5, -10, -1, 11, -7, 32, 46, -9, 15, 8, 21, 5, 4, -4, -9, -32, -6, -15, 6, 13, -23, 42, 8, 4, 22, 22, 28, 2, 20, -6, -25, -17, -12, 9, -6, 6, -54, 35, 21, -20, 7, 41, 29, -17, -11, -6, -25, -13, -7, 4, 27, -15, -50, 24, 25, -16, 1, 42, 31, -30, -16, 11, -31, -9, -5, -6, 9, -3, -24, 32, 23, -22, 15, 34, 15, -8, 22, 26, 3, -7, 11, -21, 23, 33, -30, 28, 46, -5, 46, 42, 53, -24, 26, 34, 5, -27, 18, 8, 29, 5, -49, 18, 31, -28, -2, 33, 54, -19, 18, 4, -6, -36, 12, -20, 1, -16, -63, 28, 13, -17, 18, 30, 55, -6, -8, 32, -19, 1, 31, 7, -5, -4, -44, 38, 26, -24, 9, 13, 36, -20, -13, 0, -11, -33, -5, 22, 13, -10, -19, 37, 18, -13, -5, 32, 18, 1, 1, 3, 2, -37, 11, 13, 31, 3, -37, 9, 3, -28, 25, 29, 36, -28, 11, -3, -6, -29, 21, 5, 32, 24, -26, 10, 36, -18, 22, 10, 42, 0, 16, 7, -16, -20, 23, -8, 26, 3, -31, 45, 30, -7, 4, 28, 24, -22, 4, 32, -11, -34, -13, 10, 26, 2, -47, 37, 22, -6, 25, 8, 40, -15, 4, -9, -6, -29, 21, 22, 6, 12, -15, 36, 13, 15, 15, 24, 44, -1, 4, 27, -3, -18, 21, -16, 19, -11, -46, 23, 30, -6, 40, 41, 49, -32, -10, 26, -25, -42, 6, 23, -12, 18, -41, 31, 24, -18, 26, 28, 39, -14, 23, 16, -13, -45, 23, -6, -9, -18, -62, 0, 47, 18, 41, 33, 56, -18, 0, -15, -10, -27, 8, 11, 3, -2, 
  -42, -17, -17, -17, -35, -18, -4, -42, 5, 5, -36, -20, -34, 122, -32, -10, -80, 3, -38, -28, -31, -12, -17, -35, 6, -21, -34, -4, -15, 118, -22, -20, -77, -25, -55, -6, -18, -17, -25, -39, -18, 6, -13, 10, -37, 115, -8, -14, -65, 3, -34, -15, -7, -23, -38, -8, -15, -4, -17, -2, -2, 113, -29, -34, -80, -11, -41, -42, 0, -16, -31, -32, 13, -17, 5, 2, 3, 127, -2, -28, -72, 5, -16, -6, -50, -5, -40, -21, 3, -6, -41, -6, -40, 123, -5, -39, -49, -23, -17, -34, -8, -2, 4, -12, 2, -11, -7, -1, -35, 101, 3, -44, -64, -11, -21, -20, -28, -18, -10, -18, -26, 1, -32, -28, 3, 123, -10, -21, -52, 7, -26, -17, -26, -48, -5, -30, -17, -30, -34, 0, -29, 109, -16, -16, -53, -13, -51, -21, -41, 3, -12, -21, -25, -3, -14, 11, -14, 123, 4, -43, -75, -12, -22, -46, -53, -40, -9, -44, 13, -22, -14, -24, -27, 122, -15, -43, -42, -20, -40, -17, -42, -21, -26, -29, 3, -38, -24, -15, -19, 104, -33, -6, -52, 5, -40, -32, 2, -31, -3, -7, 12, -12, -33, -5, -23, 120, -39, -3, -65, 8, -16, -19, -45, -9, -15, -31, -14, -13, -22, 3, -38, 117, -32, -39, -45, -14, -24, -44, -27, -23, -3, -25, 2, -9, -3, 4, -20, 99, -27, -33, -73, 8, -44, -38, -40, -46, -3, -32, -15, -4, -17, -22, -14, 102, -4, 1, -48, -18, -33, 1, -8, -14, -36, -21, 15, -18, -3, 5, 5, 93, -14, -41, -50, -37, -53, -5, -15, -4, -12, -24, -23, -1, -20, -5, -39, 102, -32, 2, -77, 7, -13, -41, -33, -14, 2, -42, 10, -34, 2, -15, -3, 115, -15, -3, -62, -12, -14, -41, -21, -45, -8, -21, -16, 5, -20, -19, -27, 99, -29, -41, -54, -30, -13, -12, -13, -10, -32, -2, -12, -30, -5, -22, -22, 97, -36, -13, -69, -35, -49, -23, -21, -39, -9, -48, 7, -36, -8, -31, 3, 127, -13, -2, -49, -1, -18, -9, -19, -40, -2, -30, -2, -2, -12, 14, -29, 120, -19, -39, -75, -6, -22, -15, -30, -20, -20, -16, 7, -30, -28, 11, -34, 122, -12, -34, -50, 3, -7, 0, -12, -33, -41, -6, 9, -21, -3, -5, -8, 108, -31, -29, 
  -5, -32, -34, 31, -27, -7, 6, -5, 18, 7, 44, 19, 2, -44, 25, 35, 43, -13, -45, 20, -11, -13, -24, 9, -14, 17, 44, 20, 1, -32, -8, 23, 40, -21, -50, 26, -53, -16, 7, -32, 8, 13, 35, 11, 6, -60, 24, 42, 26, 10, -55, 4, -24, -11, 1, -13, -4, 33, 5, 15, 7, -45, 24, 46, 4, 3, -31, 23, -23, -19, 9, 3, -9, 32, 33, 29, 15, -36, 15, 10, 25, 16, -48, 19, -45, -22, 16, -13, 16, 19, 32, 20, 35, -45, 15, 33, 5, -1, -14, 6, -22, -12, -1, -5, -17, 26, 26, 33, 8, -61, 22, 37, 7, 6, -22, 6, 8, -30, -17, 6, 2, 31, 42, 9, 23, -56, 18, 10, 34, 14, -18, -11, -35, -50, -37, -3, 16, 15, 39, 36, 32, -49, 17, 29, 42, 12, -58, -10, -23, -25, -29, -4, 23, -4, 29, 28, 19, -45, 32, 15, 59, -7, -56, 17, -27, -31, -7, -31, 2, 33, 53, 42, 1, -19, -7, 27, 51, -4, -52, 1, -9, -6, -8, -5, -17, 25, 19, 8, 7, -38, 3, 17, 20, 3, -24, -1, -30, -22, 6, 10, 19, 12, 35, 22, 16, -62, 16, 32, 16, -30, -51, 30, -30, -28, -9, -5, 12, 8, 28, 53, 8, -75, -2, 14, 22, -21, -8, 8, -45, -15, -10, 12, 17, 30, 33, 13, -5, -57, 6, 7, 38, -12, -16, -6, -12, -32, -4, -9, -10, 10, 39, 9, 1, -53, 37, 15, 36, 19, -38, 19, -44, -21, -9, 8, -15, 20, 15, 35, 13, -59, -7, 26, 26, -17, -42, 7, -31, -28, -8, -4, -1, -5, 20, 35, 1, -34, 19, 20, 39, 10, -6, -2, -12, -44, -16, -29, 19, 12, 18, 16, 44, -23, 24, 3, 39, 19, -49, 19, -63, -10, 18, -20, -8, 20, 23, 9, 4, -39, 27, 21, 17, 13, -44, 13, -14, -31, 12, -21, 11, 2, 17, 18, 36, -39, 20, -1, 23, -9, -26, -5, -6, -19, -8, -1, 13, 23, 12, 5, 9, -61, -13, -4, 49, 4, -18, -7, -49, -21, -27, 16, 2, 26, 5, 15, 30, -31, 16, 25, 31, 21, -12, 14, -41, -49, 9, -3, -8, 4, 32, 48, 43, -64, 16, 13, 48, 25, -41, 37, -27, -4, -3, 0, -18, 26, 34, 18, 35, -56, -6, 32, 
  2, 3, 45, 26, 40, 25, -19, 15, -27, -10, -37, -29, -10, 17, -31, -10, 15, -38, 35, 3, 33, 40, -12, 43, 12, -5, -54, 5, -25, 3, -35, -31, 32, -58, 32, 13, 20, 17, 3, 38, 10, -33, -49, -14, -36, -9, -10, -41, 36, -45, 54, 41, 32, 16, -18, 43, -17, -33, -52, 12, -4, 10, -42, -43, 29, -12, 30, 23, 36, 32, 14, 30, -9, -2, -45, -41, 0, -2, -29, -35, 34, -25, 41, 24, 14, 17, -2, 24, 7, 1, -39, -2, 1, 11, -2, -32, 27, -46, 17, 14, 22, 39, 9, 46, -1, -34, -47, -21, -6, 6, -22, -29, 31, -11, 46, 12, 30, 8, -25, 35, 7, 0, -41, -2, 0, 0, -18, -22, 33, -36, 44, 26, 8, 23, -5, 38, -1, -37, -52, -10, -41, 0, -40, -36, 15, -34, 19, 40, 25, 29, -14, 45, -12, -29, -38, -17, -39, -1, -39, -21, 47, -48, 54, 28, 30, 1, 13, 43, -20, -19, -36, -2, -23, 41, -23, -14, 28, -43, 42, 22, 9, 31, 5, 28, -20, -41, -41, 9, -20, 21, -32, -23, 17, -40, 59, 31, 18, 46, -27, 47, 7, -18, -61, -10, -32, -12, -13, -39, 38, -48, 14, 33, 31, 4, -10, 22, -17, -12, -50, 5, -9, -10, -27, -19, 24, -53, 33, 35, 19, -1, 1, 37, -12, -32, -41, -13, -38, 0, -5, -5, 30, -51, 2, 37, 43, 10, -18, 47, -24, -41, -32, -14, -44, 12, -47, -37, 27, -40, 34, 38, 23, 2, -20, 37, 9, -37, -17, -28, -7, -24, -11, -6, 39, -41, 32, 4, 45, 20, -8, 34, -16, -37, -49, -2, 5, 18, -11, -34, 15, -26, 45, 12, 40, 5, -9, 52, 13, -23, -22, 0, -14, 2, 7, -24, 36, -69, 39, 0, 23, 17, -10, 7, -5, -9, -41, -11, -41, -13, -40, -22, -14, -24, 24, 15, -2, 14, 11, 40, -25, -32, -33, -25, -22, 4, -5, -21, 41, -41, 2, 10, 14, 16, 1, 7, -17, -38, -51, 2, -29, 23, -33, -22, 13, -47, 20, 26, 22, 9, -8, 20, -19, -18, -54, 8, -37, -9, -16, -38, 24, -59, 10, -2, 45, 21, -3, 22, -22, -19, -16, -7, -37, -1, -32, -18, 21, -37, 32, -1, -3, 4, 21, 40, 2, -39, -26, -4, -43, -19, -35, -32, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 4,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0052710734307765961, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[4] = { -101, 3505, -1110, -3260, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<1, float> quant11_scale = { 1, { 6.9139263359829783e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0031096814200282097, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0059412871487438679, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0059412871487438679, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0059412871487438679, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0059412871487438679, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.01311673317104578, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.01311673317104578, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.01311673317104578, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.01311673317104578, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.21490630507469177, } };
const TfArray<1, int> quant21_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
